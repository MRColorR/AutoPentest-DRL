#!/usr/bin/env bash

# Define log file path
LOG_FILE="setup.log"
# Function to log messages
log_message() {
    local msg="[$(date +'%Y-%m-%d %H:%M:%S')] $1"
    echo "$msg"
    echo "$msg" >> "$LOG_FILE"
}

# Function to check if last command succeeded
check_success() {
    if [ $? -ne 0 ]; then
        log_message "Error: $1 failed."
        exit 1
    fi
}

# Update packages and install dependencies
log_message "Updating packages and installing dependencies..."
sudo apt-get update
sudo apt-get install -y build-essential graphviz graphviz-dev graphviz-doc nmap texlive-font-utils default-jdk mariadb-server mariadb-client flex bison curl libcurl4-openssl-dev unixodbc-dev libmariadb-dev libpcre3 libpcre3-dev python3 python3-pip postgresql metasploit-framework
check_success "Dependencies installation"
sudo apt full-upgrade -y
check_success "System upgrade"

# Download the latest version of AutoPentest-DRL
log_message "Downloading the latest version of AutoPentest-DRL..."
TAG=$(curl -s https://api.github.com/repos/MRColorR/AutoPentest-DRL/releases/latest | grep tag_name | cut -d '"' -f 4)
curl -L "https://github.com/MRColorR/AutoPentest-DRL/archive/refs/tags/$TAG.tar.gz" -o "AutoPentest-DRL-$TAG.tar.gz"
tar -xzf "AutoPentest-DRL-$TAG.tar.gz"
# Add back the v from the tag to the extracted folder as thetar remove it
TAG_UNTAR=$(echo $TAG | sed 's/v//')
mv "AutoPentest-DRL-$TAG_UNTAR" "AutoPentest-DRL-$TAG"
rm "AutoPentest-DRL-$TAG.tar.gz"



# Define the path to AutoPentest-DRL
AUTOPENTEST_DRL_PATH=$(pwd)/"AutoPentest-DRL-$TAG"

# Configure MariaDB using the provided configuration file
log_message "Configuring MariaDB..."
# Backup existing my.cnf if it exists
sudo cp /etc/mysql/my.cnf /etc/mysql/my.cnf.backup 2>/dev/null || true
# Copy the provided configuration file
sudo cp "$AUTOPENTEST_DRL_PATH/mariadb_config.cnf" /etc/mysql/my.cnf
check_success "MariaDB configuration"

# Enter the folder and create a Python virtual environment
cd "$AUTOPENTEST_DRL_PATH"
python -m venv .
source bin/activate

# Install third-party tool dependencies
cd repos

# Download and install XSB
echo "Downloading and installing XSB..."
curl -L -o XSB.tar.gz https://xsb.sourceforge.net/downloads/XSB.tar.gz
tar -xzf XSB.tar.gz
rm XSB.tar.gz
cd XSB/build
./configure
./makexsb
cd ..
XSB_PATH=$(pwd)/bin
# Before modifying .bashrc, check if PATH is already set
grep -qxF 'export PATH="$XSB_PATH:$PATH"' ~/.bashrc || echo "export PATH=\"$XSB_PATH:$PATH\"" >> ~/.bashrc
source ~/.bashrc

# Download and install MulVAL
echo "Downloading and installing MulVAL..."
cd $AUTOPENTEST_DRL_PATH/repos
TAG=$(curl -s https://api.github.com/repos/MRColorR/mulval/releases/latest | grep tag_name | cut -d '"' -f 4)
curl -L "https://github.com/MRColorR/mulval/archive/refs/tags/$TAG.tar.gz" -o "mulval_$TAG.tar.gz"
tar -xzf "mulval_$TAG.tar.gz"
rm "mulval_$TAG.tar.gz"
cd "mulval_$TAG"
make
MULVALROOT=$(pwd)
grep -qxF 'export MULVALROOT="$MULVALROOT"' ~/.bashrc || echo "export MULVALROOT=\"$MULVALROOT\"" >> ~/.bashrc
grep -qxF 'export PATH="$MULVALROOT/bin:$MULVALROOT/utils:$PATH"' ~/.bashrc || echo "export PATH=\"$MULVALROOT/bin:$MULVALROOT/utils:$PATH\"" >> ~/.bashrc
source ~/.bashrc

# Test MulVAL installation
log_message "Testing MulVAL installation..."
cd $MULVALROOT/utils
chmod u+x graph_gen.sh
cd $MULVALROOT/testcases/3host
# print a successful message if the following command generates AttachGraph.eps file
./graph_gen.sh input.P -v -p
# Check for the generation of AttachGraph.eps file
if [ -f AttachGraph.eps ]; then
    echo "AttachGraph created, MulVAL installation successful!"
else
    echo "AttachGraph not created, MulVAL installation failed!"
fi

# Go back to the main directory of AutoPentest-DRL and install Python requirements
cd "$AUTOPENTEST_DRL_PATH"
# Before installing Python requirements, check if venv is activated
if [ -z "$VIRTUAL_ENV" ]; then
    log_message "Python virtual environment is not active. Exiting..."
    exit 1
fi
log_message "Installing Python requirements..."
pip install -r requirements.txt
check_success "Python requirements installation"

log_message "Executing the logical test..."
python3 ./AutoPentest-DRL.py logical_attack
check_success "Logical test execution"

log_message "AutoPentest-DRL setup completed successfully."
